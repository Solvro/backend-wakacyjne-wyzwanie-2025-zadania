import noSwagger from "./configs/noSwagger.js";
import recommended from "./configs/recommended.js";
import rules from "./rules/index.js";
import * as parserBase from "@typescript-eslint/parser";
import { fileURLToPath } from "url";
import { readFileSync } from "fs";
import { dirname, resolve } from "path";
// eslint-disable-next-line @typescript-eslint/naming-convention
const __filename = fileURLToPath(import.meta.url);
// eslint-disable-next-line @typescript-eslint/naming-convention
const __dirname = dirname(__filename);
const { name, version } = JSON.parse(readFileSync(resolve(__dirname, "../package.json"), "utf8"));
// Most of this is copied and simplified from https://github.com/typescript-eslint/typescript-eslint/blob/v8.22.0/packages/typescript-eslint/src/configs/recommended.ts
// note - cannot migrate this to an import statement because it will make TSC copy the package.json to the dist folder
const meta = {
    name,
    version,
};
export const parser = {
    meta: parserBase.meta,
    parseForESLint: parserBase.parseForESLint,
};
const classicPlugin = {
    configs: {
        recommended: recommended,
        "no-swagger": noSwagger,
    },
    rules,
    meta,
};
export const plugin = classicPlugin;
const flatBaseConfig = (plugin, parser) => {
    const baseConfig = {
        name: "@darraghor/nestjs-typed/base",
        languageOptions: {
            parser,
            sourceType: "module",
        },
        plugins: {
            "@darraghor/nestjs-typed": plugin,
        },
    };
    return baseConfig;
};
// export the classic plugin configs
export { classicPlugin };
// export the flat configs
export default {
    plugin,
    configs: {
        flatRecommended: [
            flatBaseConfig(plugin, parser),
            {
                name: "@darraghor/nestjs-typed/recommended",
                rules: recommended.rules,
            },
        ],
        flatNoSwagger: [
            {
                name: "@darraghor/nestjs-typed/no-swagger",
                rules: noSwagger.rules,
            },
        ],
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxTQUFTLE1BQU0sd0JBQXdCLENBQUM7QUFDL0MsT0FBTyxXQUFXLE1BQU0sMEJBQTBCLENBQUM7QUFDbkQsT0FBTyxLQUFLLE1BQU0sa0JBQWtCLENBQUM7QUFFckMsT0FBTyxLQUFLLFVBQVUsTUFBTSwyQkFBMkIsQ0FBQztBQUN4RCxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sS0FBSyxDQUFDO0FBQ2xDLE9BQU8sRUFBQyxZQUFZLEVBQUMsTUFBTSxJQUFJLENBQUM7QUFDaEMsT0FBTyxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFFdEMsZ0VBQWdFO0FBQ2hFLE1BQU0sVUFBVSxHQUFHLGFBQWEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2xELGdFQUFnRTtBQUNoRSxNQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDdEMsTUFBTSxFQUFDLElBQUksRUFBRSxPQUFPLEVBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUM5QixZQUFZLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxpQkFBaUIsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUk5RCxDQUFDO0FBQ0YsdUtBQXVLO0FBRXZLLHNIQUFzSDtBQUV0SCxNQUFNLElBQUksR0FBRztJQUNULElBQUk7SUFDSixPQUFPO0NBQ1YsQ0FBQztBQUNGLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBK0I7SUFDOUMsSUFBSSxFQUFFLFVBQVUsQ0FBQyxJQUFJO0lBQ3JCLGNBQWMsRUFBRSxVQUFVLENBQUMsY0FBYztDQUM1QyxDQUFDO0FBRUYsTUFBTSxhQUFhLEdBQUc7SUFDbEIsT0FBTyxFQUFFO1FBQ0wsV0FBVyxFQUFFLFdBQVc7UUFDeEIsWUFBWSxFQUFFLFNBQVM7S0FDMUI7SUFDRCxLQUFLO0lBQ0wsSUFBSTtDQUNpQixDQUFDO0FBRTFCLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBK0IsYUFHakQsQ0FBQztBQUNGLE1BQU0sY0FBYyxHQUFHLENBQ25CLE1BQXlCLEVBQ3pCLE1BQXlCLEVBQ1IsRUFBRTtJQUNuQixNQUFNLFVBQVUsR0FBc0I7UUFDbEMsSUFBSSxFQUFFLDhCQUE4QjtRQUNwQyxlQUFlLEVBQUU7WUFDYixNQUFNO1lBQ04sVUFBVSxFQUFFLFFBQVE7U0FDdkI7UUFDRCxPQUFPLEVBQUU7WUFDTCx5QkFBeUIsRUFBRSxNQUFNO1NBQ3BDO0tBQ0osQ0FBQztJQUNGLE9BQU8sVUFBVSxDQUFDO0FBQ3RCLENBQUMsQ0FBQztBQUVGLG9DQUFvQztBQUNwQyxPQUFPLEVBQUMsYUFBYSxFQUFDLENBQUM7QUFFdkIsMEJBQTBCO0FBQzFCLGVBQWU7SUFDWCxNQUFNO0lBQ04sT0FBTyxFQUFFO1FBQ0wsZUFBZSxFQUFFO1lBQ2IsY0FBYyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUM7WUFDOUI7Z0JBQ0ksSUFBSSxFQUFFLHFDQUFxQztnQkFDM0MsS0FBSyxFQUFFLFdBQVcsQ0FBQyxLQUFLO2FBQzNCO1NBQ0o7UUFDRCxhQUFhLEVBQUU7WUFDWDtnQkFDSSxJQUFJLEVBQUUsb0NBQW9DO2dCQUMxQyxLQUFLLEVBQUUsU0FBUyxDQUFDLEtBQUs7YUFDekI7U0FDSjtLQUlKO0NBQ0osQ0FBQyJ9