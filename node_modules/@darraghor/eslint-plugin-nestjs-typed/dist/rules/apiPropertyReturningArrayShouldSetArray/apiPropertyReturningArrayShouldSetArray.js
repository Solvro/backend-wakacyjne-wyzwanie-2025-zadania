import { AST_NODE_TYPES } from "@typescript-eslint/utils";
import { createRule } from "../../utils/createRule.js";
import { typedTokenHelpers } from "../../utils/typedTokenHelpers.js";
import ArraySetResultModel from "./arraySetResultModel.js";
export const shouldSetArrayProperty = (node) => {
    const decorators = typedTokenHelpers.getDecoratorsNamed(node, [
        "ApiPropertyOptional",
        "ApiProperty",
    ]);
    if (decorators.length === 0) {
        return new ArraySetResultModel(false, false);
    }
    // There should only be one of these apiproperty decorators so we just grab the parameter to decorator at index 0
    const firstArgumentToDecorator = decorators[0].expression?.arguments[0];
    // if the code is using anything other than object expression, ignore the rule (we dont want to go looking at objects)
    // we DO want to alert if there is no argument at all. so we continue to test the rule if no argument was passed
    if (firstArgumentToDecorator &&
        (firstArgumentToDecorator.type !== AST_NODE_TYPES.ObjectExpression ||
            // if the things passed to the object expression contains a spread then ignore that too!
            firstArgumentToDecorator.properties.some((x) => x.type === AST_NODE_TYPES.SpreadElement))) {
        return new ArraySetResultModel(false, false);
    }
    const hasIsArraySetInOptions = typedTokenHelpers.getPropertyValueEqualsExpected(firstArgumentToDecorator, "isArray", true);
    const typeAnnotation = node.typeAnnotation?.typeAnnotation;
    // handle string[] or Array<string>
    const isArrayType = typeAnnotation
        ?.typeName?.name === "Array";
    const isTypescriptArrayType = typeAnnotation?.type === AST_NODE_TYPES.TSArrayType;
    const isAnArrayLikeType = isArrayType || isTypescriptArrayType;
    return new ArraySetResultModel(isAnArrayLikeType && !hasIsArraySetInOptions, !isAnArrayLikeType && hasIsArraySetInOptions);
};
const rule = createRule({
    name: "api-property-returning-array-should-set-array",
    meta: {
        docs: {
            description: "Properties of array should set array",
        },
        messages: {
            shouldSetArrayPropertyTrue: `Property returning array should set array option property true`,
            shouldSetArrayPropertyFalse: `Property not returning array should not set array option property true`,
        },
        schema: [],
        hasSuggestions: false,
        type: "suggestion",
    },
    defaultOptions: [],
    create(context) {
        return {
            PropertyDefinition: (node) => {
                const shouldSetArrayResults = shouldSetArrayProperty(node);
                if (shouldSetArrayResults.isArrayShouldBeSetFalse) {
                    context.report({
                        node: node,
                        messageId: "shouldSetArrayPropertyFalse",
                    });
                }
                if (shouldSetArrayResults.isArrayShouldBeSetTrue) {
                    context.report({
                        node: node,
                        messageId: "shouldSetArrayPropertyTrue",
                    });
                }
            },
        };
    },
});
export default rule;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpUHJvcGVydHlSZXR1cm5pbmdBcnJheVNob3VsZFNldEFycmF5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3J1bGVzL2FwaVByb3BlcnR5UmV0dXJuaW5nQXJyYXlTaG91bGRTZXRBcnJheS9hcGlQcm9wZXJ0eVJldHVybmluZ0FycmF5U2hvdWxkU2V0QXJyYXkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLGNBQWMsRUFBVyxNQUFNLDBCQUEwQixDQUFDO0FBQ2xFLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSwyQkFBMkIsQ0FBQztBQUNyRCxPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSxrQ0FBa0MsQ0FBQztBQUNuRSxPQUFPLG1CQUFtQixNQUFNLDBCQUEwQixDQUFDO0FBRTNELE1BQU0sQ0FBQyxNQUFNLHNCQUFzQixHQUFHLENBQ2xDLElBQWlDLEVBQ2QsRUFBRTtJQUNyQixNQUFNLFVBQVUsR0FBRyxpQkFBaUIsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLEVBQUU7UUFDMUQscUJBQXFCO1FBQ3JCLGFBQWE7S0FDaEIsQ0FBQyxDQUFDO0lBRUgsSUFBSSxVQUFVLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRSxDQUFDO1FBQzFCLE9BQU8sSUFBSSxtQkFBbUIsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDakQsQ0FBQztJQUVELGlIQUFpSDtJQUNqSCxNQUFNLHdCQUF3QixHQUMxQixVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFDakIsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFaEIsc0hBQXNIO0lBQ3RILGdIQUFnSDtJQUNoSCxJQUNJLHdCQUF3QjtRQUN4QixDQUFDLHdCQUF3QixDQUFDLElBQUksS0FBSyxjQUFjLENBQUMsZ0JBQWdCO1lBQzlELHdGQUF3RjtZQUN4Rix3QkFBd0IsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUNwQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxjQUFjLENBQUMsYUFBYSxDQUNqRCxDQUFDLEVBQ1IsQ0FBQztRQUNDLE9BQU8sSUFBSSxtQkFBbUIsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDakQsQ0FBQztJQUVELE1BQU0sc0JBQXNCLEdBQ3hCLGlCQUFpQixDQUFDLDhCQUE4QixDQUM1Qyx3QkFBd0IsRUFDeEIsU0FBUyxFQUNULElBQUksQ0FDUCxDQUFDO0lBRU4sTUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLGNBQWMsRUFBRSxjQUFjLENBQUM7SUFDM0QsbUNBQW1DO0lBQ25DLE1BQU0sV0FBVyxHQUVSLGNBQXVEO1FBQ3BELEVBQUUsUUFDVCxFQUFFLElBQUksS0FBSyxPQUFPLENBQUM7SUFDeEIsTUFBTSxxQkFBcUIsR0FDdkIsY0FBYyxFQUFFLElBQUksS0FBSyxjQUFjLENBQUMsV0FBVyxDQUFDO0lBQ3hELE1BQU0saUJBQWlCLEdBQUcsV0FBVyxJQUFJLHFCQUFxQixDQUFDO0lBRS9ELE9BQU8sSUFBSSxtQkFBbUIsQ0FDMUIsaUJBQWlCLElBQUksQ0FBQyxzQkFBc0IsRUFDNUMsQ0FBQyxpQkFBaUIsSUFBSSxzQkFBc0IsQ0FDL0MsQ0FBQztBQUNOLENBQUMsQ0FBQztBQUVGLE1BQU0sSUFBSSxHQUFHLFVBQVUsQ0FHckI7SUFDRSxJQUFJLEVBQUUsK0NBQStDO0lBQ3JELElBQUksRUFBRTtRQUNGLElBQUksRUFBRTtZQUNGLFdBQVcsRUFBRSxzQ0FBc0M7U0FDdEQ7UUFDRCxRQUFRLEVBQUU7WUFDTiwwQkFBMEIsRUFBRSxnRUFBZ0U7WUFDNUYsMkJBQTJCLEVBQUUsd0VBQXdFO1NBQ3hHO1FBQ0QsTUFBTSxFQUFFLEVBQUU7UUFDVixjQUFjLEVBQUUsS0FBSztRQUNyQixJQUFJLEVBQUUsWUFBWTtLQUNyQjtJQUNELGNBQWMsRUFBRSxFQUFFO0lBRWxCLE1BQU0sQ0FBQyxPQUFPO1FBQ1YsT0FBTztZQUNILGtCQUFrQixFQUFFLENBQUMsSUFBbUIsRUFBRSxFQUFFO2dCQUN4QyxNQUFNLHFCQUFxQixHQUFHLHNCQUFzQixDQUNoRCxJQUFtQyxDQUN0QyxDQUFDO2dCQUVGLElBQUkscUJBQXFCLENBQUMsdUJBQXVCLEVBQUUsQ0FBQztvQkFDaEQsT0FBTyxDQUFDLE1BQU0sQ0FBQzt3QkFDWCxJQUFJLEVBQUUsSUFBSTt3QkFDVixTQUFTLEVBQUUsNkJBQTZCO3FCQUMzQyxDQUFDLENBQUM7Z0JBQ1AsQ0FBQztnQkFDRCxJQUFJLHFCQUFxQixDQUFDLHNCQUFzQixFQUFFLENBQUM7b0JBQy9DLE9BQU8sQ0FBQyxNQUFNLENBQUM7d0JBQ1gsSUFBSSxFQUFFLElBQUk7d0JBQ1YsU0FBUyxFQUFFLDRCQUE0QjtxQkFDMUMsQ0FBQyxDQUFDO2dCQUNQLENBQUM7WUFDTCxDQUFDO1NBQ0osQ0FBQztJQUNOLENBQUM7Q0FDSixDQUFDLENBQUM7QUFFSCxlQUFlLElBQUksQ0FBQyJ9