import { TSESTree } from "@typescript-eslint/utils";
import { createRule } from "../../utils/createRule.js";
import { ASTUtils } from "@typescript-eslint/utils";
export const isValidationPipeNewExpression = (node) => {
    const newExpression = node;
    const callee = newExpression.callee;
    if (callee && callee.name === "ValidationPipe") {
        return true;
    }
    return false;
};
export const checkObjectExpression = (os) => {
    if (!os) {
        return false;
    }
    // eslint-disable-next-line @typescript-eslint/non-nullable-type-assertion-style
    const forbidUnknownValuesProperty = os.properties
        .filter(ASTUtils.isNodeOfType(TSESTree.AST_NODE_TYPES.Property))
        .find((p) => p.key.name === "forbidUnknownValues");
    // property is not present. this is wrong.
    if (os && !forbidUnknownValuesProperty) {
        return true;
    }
    // property is explicitly false. this is wrong.
    const isPropertyValueExplicitlyFalse = forbidUnknownValuesProperty.value.raw === "false";
    if (isPropertyValueExplicitlyFalse) {
        return true;
    }
    // otherwise ignore this. we don't know the value.
    return false;
};
export const shouldTriggerNewExpressionHasProperty = (node) => {
    // only look at ValidationPipe expressions
    if (!isValidationPipeNewExpression(node)) {
        return false;
    }
    const newExpression = node;
    // the default new ValidationPipe() seems to prevent the attack so we ignore calls with no parameters
    // we also ignore parameters that are not explicit object expressions
    // or if the properties are spread
    if (newExpression.arguments.length === 0 ||
        newExpression.arguments[0].type !==
            TSESTree.AST_NODE_TYPES.ObjectExpression ||
        newExpression.arguments[0].properties.some(ASTUtils.isNodeOfType(TSESTree.AST_NODE_TYPES.SpreadElement))) {
        return false;
    }
    const argument = newExpression?.arguments[0];
    return checkObjectExpression(argument);
};
export const shouldTriggerForVariableDeclaratorExpression = (node) => {
    // if the developer hasn't annotated the object we can't continue to check these rules correctly (we don't know if anonymous objects need to have any props)
    const variableDeclarator = node;
    const asExpression = variableDeclarator.init;
    const typeAnnotation = asExpression?.typeAnnotation;
    const typeName = typeAnnotation && typeAnnotation?.typeName;
    if (typeName === undefined || typeName.name !== "ValidationPipeOptions") {
        return false;
    }
    // otherwise check the object expression is what we want
    return checkObjectExpression(asExpression.expression);
};
const rule = createRule({
    name: "validation-pipe-should-use-forbid-unknown",
    meta: {
        docs: {
            description: "ValidationPipe should use forbidUnknownValues: true to prevent attacks. See https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-18413",
        },
        messages: {
            shouldSpecifyForbidUnknownValues: `ValidationPipe should use forbidUnknownValues: true to prevent attacks if setting you're setting any options. See https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-18413`,
        },
        schema: [],
        hasSuggestions: false,
        type: "suggestion",
    },
    defaultOptions: [],
    create(context) {
        return {
            NewExpression(node) {
                // eslint-disable-next-line @typescript-eslint/naming-convention
                const result = shouldTriggerNewExpressionHasProperty(node);
                if (result) {
                    context.report({
                        node: node,
                        messageId: "shouldSpecifyForbidUnknownValues",
                    });
                }
            },
            VariableDeclarator(node) {
                // eslint-disable-next-line @typescript-eslint/naming-convention
                const result = shouldTriggerForVariableDeclaratorExpression(node);
                if (result) {
                    context.report({
                        node: node,
                        messageId: "shouldSpecifyForbidUnknownValues",
                    });
                }
            },
        };
    },
});
export default rule;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hvdWxkU3BlY2lmeUZvcmJpZFVua25vd25WYWx1ZXNSdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3J1bGVzL3Nob3VsZFNwZWNpZnlGb3JiaWRVbmtub3duVmFsdWVzL3Nob3VsZFNwZWNpZnlGb3JiaWRVbmtub3duVmFsdWVzUnVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0sMEJBQTBCLENBQUM7QUFDbEQsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLDJCQUEyQixDQUFDO0FBQ3JELE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQztBQUVsRCxNQUFNLENBQUMsTUFBTSw2QkFBNkIsR0FBRyxDQUFDLElBQW1CLEVBQVcsRUFBRTtJQUMxRSxNQUFNLGFBQWEsR0FBRyxJQUE4QixDQUFDO0lBQ3JELE1BQU0sTUFBTSxHQUFHLGFBQWEsQ0FBQyxNQUE2QixDQUFDO0lBQzNELElBQUksTUFBTSxJQUFJLE1BQU0sQ0FBQyxJQUFJLEtBQUssZ0JBQWdCLEVBQUUsQ0FBQztRQUM3QyxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBQ0QsT0FBTyxLQUFLLENBQUM7QUFDakIsQ0FBQyxDQUFDO0FBQ0YsTUFBTSxDQUFDLE1BQU0scUJBQXFCLEdBQUcsQ0FDakMsRUFBNkIsRUFDdEIsRUFBRTtJQUNULElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQztRQUNOLE9BQU8sS0FBSyxDQUFDO0lBQ2pCLENBQUM7SUFDRCxnRkFBZ0Y7SUFDaEYsTUFBTSwyQkFBMkIsR0FBRyxFQUFFLENBQUMsVUFBVTtTQUM1QyxNQUFNLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQy9ELElBQUksQ0FDRCxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUUsQ0FBQyxDQUFDLEdBQTJCLENBQUMsSUFBSSxLQUFLLHFC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