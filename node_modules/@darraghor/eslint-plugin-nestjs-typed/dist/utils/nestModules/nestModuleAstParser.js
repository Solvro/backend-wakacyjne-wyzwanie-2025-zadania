import { AST_NODE_TYPES } from "@typescript-eslint/utils";
import { NestProvidedInjectablesMap, } from "./models/NestProvidedInjectablesMap.js";
export const nestModuleAstParser = {
    findNestModuleClass(ast) {
        for (const n of ast.body) {
            // find class declaration even if it's inside an export
            if (n.type === AST_NODE_TYPES.ClassDeclaration &&
                n.decorators &&
                n.decorators.length > 0) {
                return n;
            }
            if ((n.type === AST_NODE_TYPES.ExportNamedDeclaration ||
                n.type === AST_NODE_TYPES.ExportDefaultDeclaration) &&
                n.declaration?.type === AST_NODE_TYPES.ClassDeclaration) {
                return n.declaration;
            }
        }
        return null;
    },
    mapNestModuleDecorator(n, path) {
        // The nest module decorator is called "Module"
        const moduleDecorator = n.decorators.find((d) => d.expression
            .callee?.name === "Module");
        if (moduleDecorator) {
            const mappedControllerElements = this.mapModuleDecoratorOptionProperty(moduleDecorator, "controllers");
            const mappedProviderElements = this.mapModuleDecoratorOptionProperty(moduleDecorator, "providers");
            const nestModuleMap = [
                path,
                new NestProvidedInjectablesMap(mappedControllerElements, mappedProviderElements),
            ];
            return nestModuleMap;
        }
        return null;
    },
    mapModuleDecoratorOptionProperty(moduleDecorator, propertyName) {
        const optionProperty = moduleDecorator.expression
            .arguments[0].properties.find((p) => p.key.name ===
            propertyName);
        if (optionProperty) {
            // a property can be an array expression e.g. myProp = []
            // or a variable e.g. myProp = someArray
            // - this only supports array expressions for now!
            const propertyAsArrayExpressionElements = optionProperty
                .value.elements || [];
            return new Set(propertyAsArrayExpressionElements.map((element) => element.name));
        }
        return new Set();
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmVzdE1vZHVsZUFzdFBhcnNlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy91dGlscy9uZXN0TW9kdWxlcy9uZXN0TW9kdWxlQXN0UGFyc2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxjQUFjLEVBQVcsTUFBTSwwQkFBMEIsQ0FBQztBQUNsRSxPQUFPLEVBRUgsMEJBQTBCLEdBQzdCLE1BQU0sd0NBQXdDLENBQUM7QUFFaEQsTUFBTSxDQUFDLE1BQU0sbUJBQW1CLEdBQUc7SUFDL0IsbUJBQW1CLENBQ2YsR0FBcUI7UUFFckIsS0FBSyxNQUFNLENBQUMsSUFBSSxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDdkIsdURBQXVEO1lBQ3ZELElBQ0ksQ0FBQyxDQUFDLElBQUksS0FBSyxjQUFjLENBQUMsZ0JBQWdCO2dCQUMxQyxDQUFDLENBQUMsVUFBVTtnQkFDWixDQUFDLENBQUMsVUFBVSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQ3pCLENBQUM7Z0JBQ0MsT0FBTyxDQUFDLENBQUM7WUFDYixDQUFDO1lBRUQsSUFDSSxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssY0FBYyxDQUFDLHNCQUFzQjtnQkFDN0MsQ0FBQyxDQUFDLElBQUksS0FBSyxjQUFjLENBQUMsd0JBQXdCLENBQUM7Z0JBQ3ZELENBQUMsQ0FBQyxXQUFXLEVBQUUsSUFBSSxLQUFLLGNBQWMsQ0FBQyxnQkFBZ0IsRUFDekQsQ0FBQztnQkFDQyxPQUFPLENBQUMsQ0FBQyxXQUFXLENBQUM7WUFDekIsQ0FBQztRQUNMLENBQUM7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRUQsc0JBQXNCLENBQ2xCLENBQTRCLEVBQzVCLElBQTBCO1FBRTFCLCtDQUErQztRQUMvQyxNQUFNLGVBQWUsR0FBRyxDQUFDLENBQUMsVUFBVSxDQUFDLElBQUksQ0FDckMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUVHLENBQUMsQ0FBQyxVQUFzQzthQUNwQyxNQUNSLEVBQUUsSUFBSSxLQUFLLFFBQVEsQ0FDM0IsQ0FBQztRQUNGLElBQUksZUFBZSxFQUFFLENBQUM7WUFDbEIsTUFBTSx3QkFBd0IsR0FDMUIsSUFBSSxDQUFDLGdDQUFnQyxDQUNqQyxlQUFlLEVBQ2YsYUFBYSxDQUNoQixDQUFDO1lBQ04sTUFBTSxzQkFBc0IsR0FDeEIsSUFBSSxDQUFDLGdDQUFnQyxDQUNqQyxlQUFlLEVBQ2YsV0FBVyxDQUNkLENBQUM7WUFFTixNQUFNLGFBQWEsR0FHZjtnQkFDQSxJQUFJO2dCQUNKLElBQUksMEJBQTBCLENBQzFCLHdCQUF3QixFQUN4QixzQkFBc0IsQ0FDekI7YUFDSixDQUFDO1lBQ0YsT0FBTyxhQUFhLENBQUM7UUFDekIsQ0FBQztRQUVELE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFDRCxnQ0FBZ0MsQ0FDNUIsZUFBbUMsRUFDbkMsWUFBb0I7UUFFcEIsTUFBTSxjQUFjLEdBQ2YsZUFBZSxDQUFDLFVBQWlEO2FBQzdELFNBQVMsQ0FBQyxDQUFDLENBQ25CLENBQUMsVUFBVSxDQUFDLElBQUksQ0FDYixDQUFDLENBQUMsRUFBRSxFQUFFLENBQ0EsQ0FBdUIsQ0FBQyxHQUEyQixDQUFDLElBQUk7WUFDMUQsWUFBWSxDQUNuQixDQUFDO1FBRUYsSUFBSSxjQUFjLEVBQUUsQ0FBQztZQUNqQix5REFBeUQ7WUFDekQsd0NBQXdDO1lBQ3hDLGtEQUFrRDtZQUVsRCxNQUFNLGlDQUFpQyxHQUU5QixjQUErQztpQkFDM0MsS0FDUixDQUFDLFFBQVEsSUFBSSxFQUFFLENBQUM7WUFFckIsT0FBTyxJQUFJLEdBQUcsQ0FDVixpQ0FBaUMsQ0FBQyxHQUFHLENBQ2pDLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBRSxPQUErQixDQUFDLElBQUksQ0FDckQsQ0FDSixDQUFDO1FBQ04sQ0FBQztRQUVELE9BQU8sSUFBSSxHQUFHLEVBQUUsQ0FBQztJQUNyQixDQUFDO0NBQ0osQ0FBQyJ9