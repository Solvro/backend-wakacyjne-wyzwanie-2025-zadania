// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import * as unambiguous from "eslint-module-utils/unambiguous";
import fs from "fs";
import { typedTokenHelpers } from "../typedTokenHelpers.js";
import { nestModuleAstParser } from "./nestModuleAstParser.js";
import { nestProviderAstParser } from "./nestProviderAstParser.js";
const implementsForInjectablesThatAreNotProvided = new Set([
    "CanActivate", //(isAGuard)
    "NestInterceptor", //(isAnInterceptor)
    "PipeTransform", //(isAPipeTransform)
    "NestMiddleware", //(isMiddleware)
]);
const NestProvidedInjectableMapper = {
    detectDirectoryToScanForFiles(sourceGlob, currentWorkingDirectory) {
        if (sourceGlob && typeof sourceGlob === "string") {
            return [sourceGlob];
        }
        if (sourceGlob && Array.isArray(sourceGlob)) {
            return sourceGlob;
        }
        console.debug("Injectables should be provided is using cwd for scanning. Consider configuring it in eslintrc.", { currentWorkingDirectory });
        return [currentWorkingDirectory];
    },
    parseFileList(files, 
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    context) {
        const moduleMaps = new Map();
        files
            .map((f) => {
            const fileContents = NestProvidedInjectableMapper.readFileContents(f.filename);
            const fileAstString = typedTokenHelpers.parseStringToAst(fileContents, f.filename, context);
            const result = NestProvidedInjectableMapper.mapAllProvidedInjectablesInModuleOrProviderFile(fileAstString, f.filename);
            return result;
        })
            // eslint-disable-next-line @typescript-eslint/unbound-method
            .filter(NestProvidedInjectableMapper.notEmpty)
            .forEach((m) => moduleMaps.set(m[0], m[1]));
        return moduleMaps;
    },
    notEmpty(value) {
        if (value === null || value === undefined)
            return false;
        return true;
    },
    readFileContents(path) {
        return fs.readFileSync(path, { encoding: "utf8" });
    },
    isNestInjectableThatIsNeverProvided(node) {
        for (const implementsClass of node.implements || []) {
            if (implementsForInjectablesThatAreNotProvided.has(implementsClass.expression.name)) {
                return true;
            }
        }
        return false;
    },
    mapAllProvidedInjectablesInModuleOrProviderFile(ast, path) {
        try {
            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument, @typescript-eslint/no-explicit-any
            if (!unambiguous.isModule(ast)) {
                return null;
            }
            // This does too much and should probably be split up
            // i also assume you would never have multiple of providers, controllers or modules in a file
            // dangerous assumption i guess. i have never seen this done before though.
            // set up the response model
            let moduleFileListOfControllersAndProviders = null;
            // Is this a module?
            const foundNestModuleClass = nestModuleAstParser.findNestModuleClass(ast);
            if (foundNestModuleClass) {
                moduleFileListOfControllersAndProviders =
                    nestModuleAstParser.mapNestModuleDecorator(foundNestModuleClass, path);
                return moduleFileListOfControllersAndProviders;
            }
            // or is this a custom provider that would provide an instance of the class?
            // if it is we map the identifier it "provide"s. This will only work if it's an identifier
            // it can't be provider for a string literal "provide".
            const foundProviderDeclaration = nestProviderAstParser.findNestProviderVariableDeclaration(ast);
            const provideProperty = nestProviderAstParser.findProvideProperty(foundProviderDeclaration, "provide");
            if (provideProperty) {
                moduleFileListOfControllersAndProviders =
                    nestProviderAstParser.mapNestProviderObject(provideProperty, path);
            }
            return moduleFileListOfControllersAndProviders;
        }
        catch (error) {
            console.error("parse error:", path, error);
            // m.errors.push(error);
            // return m; // can't continue
            return null;
        }
    },
};
export default NestProvidedInjectableMapper;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmVzdFByb3ZpZGVkSW5qZWN0YWJsZU1hcHBlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy91dGlscy9uZXN0TW9kdWxlcy9uZXN0UHJvdmlkZWRJbmplY3RhYmxlTWFwcGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLDZEQUE2RDtBQUM3RCxhQUFhO0FBQ2IsT0FBTyxLQUFLLFdBQVcsTUFBTSxpQ0FBaUMsQ0FBQztBQUMvRCxPQUFPLEVBQUUsTUFBTSxJQUFJLENBQUM7QUFDcEIsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0seUJBQXlCLENBQUM7QUFLMUQsT0FBTyxFQUFDLG1CQUFtQixFQUFDLE1BQU0sMEJBQTBCLENBQUM7QUFDN0QsT0FBTyxFQUFDLHFCQUFxQixFQUFDLE1BQU0sNEJBQTRCLENBQUM7QUFFakUsTUFBTSwwQ0FBMEMsR0FBRyxJQUFJLEdBQUcsQ0FBQztJQUN2RCxhQUFhLEVBQUUsWUFBWTtJQUMzQixpQkFBaUIsRUFBRSxtQkFBbUI7SUFDdEMsZUFBZSxFQUFFLG9CQUFvQjtJQUNyQyxnQkFBZ0IsRUFBRSxnQkFBZ0I7Q0FDckMsQ0FBQyxDQUFDO0FBQ0gsTUFBTSw0QkFBNEIsR0FBRztJQUNqQyw2QkFBNkIsQ0FDekIsVUFBeUMsRUFDekMsdUJBQStCO1FBRS9CLElBQUksVUFBVSxJQUFJLE9BQU8sVUFBVSxLQUFLLFFBQVEsRUFBRSxDQUFDO1lBQy9DLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUN4QixDQUFDO1FBRUQsSUFBSSxVQUFVLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDO1lBQzFDLE9BQU8sVUFBVSxDQUFDO1FBQ3RCLENBQUM7UUFDRCxPQUFPLENBQUMsS0FBSyxDQUNULGdHQUFnRyxFQUNoRyxFQUFDLHVCQUF1QixFQUFDLENBQzVCLENBQUM7UUFDRixPQUFPLENBQUMsdUJBQXVCLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lB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