import { AST_NODE_TYPES } from "@typescript-eslint/utils";
import { NestProvidedInjectablesMap, } from "./models/NestProvidedInjectablesMap.js";
function isObjectExpression(node) {
    return node.type === AST_NODE_TYPES.ObjectExpression;
}
export const nestProviderAstParser = {
    mapNestProviderObject(n, path) {
        const propertyName = n.value?.name;
        if (propertyName) {
            return [
                path,
                new NestProvidedInjectablesMap(new Set(), new Set([propertyName])),
            ];
        }
        return null;
    },
    findProvideProperty(providerDeclaration, propertyName) {
        if (providerDeclaration) {
            const properties = isObjectExpression(providerDeclaration)
                ? providerDeclaration
                : providerDeclaration.init;
            // Type guard with isObjectExpression
            if (properties === null || !isObjectExpression(properties)) {
                console.log("null properties", properties);
                return null;
            }
            const foundProviderProperty = properties.properties.find((p) => p.key
                .name === propertyName);
            return foundProviderProperty;
        }
        return null;
    },
    findNestProviderVariableDeclaration(ast) {
        for (const n of ast.body) {
            if ((n.type === AST_NODE_TYPES.ExportNamedDeclaration ||
                n.type === AST_NODE_TYPES.ExportDefaultDeclaration) &&
                n.declaration?.type === AST_NODE_TYPES.VariableDeclaration) {
                const providerDeclaration = n.declaration.declarations.find((d) => {
                    const isObjectExpression = (d.type === AST_NODE_TYPES.VariableDeclarator &&
                        // has property "provide" and that property is an identifier
                        d.init?.type ===
                            AST_NODE_TYPES.ObjectExpression) ||
                        false;
                    const hasProvideProperty = isObjectExpression &&
                        d.init.properties.some((property) => {
                            return ((property.type ===
                                AST_NODE_TYPES.Property &&
                                property.key.type ===
                                    AST_NODE_TYPES.Identifier &&
                                property.key.name === "provide" &&
                                property.value.type ===
                                    AST_NODE_TYPES.Identifier) ||
                                false);
                        });
                    return hasProvideProperty;
                });
                return providerDeclaration;
            }
        }
        return undefined;
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmVzdFByb3ZpZGVyQXN0UGFyc2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3V0aWxzL25lc3RNb2R1bGVzL25lc3RQcm92aWRlckFzdFBhcnNlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsY0FBYyxFQUFXLE1BQU0sMEJBQTBCLENBQUM7QUFDbEUsT0FBTyxFQUNILDBCQUEwQixHQUU3QixNQUFNLHdDQUF3QyxDQUFDO0FBRWhELFNBQVMsa0JBQWtCLENBQ3ZCLElBQW1CO0lBRW5CLE9BQU8sSUFBSSxDQUFDLElBQUksS0FBSyxjQUFjLENBQUMsZ0JBQWdCLENBQUM7QUFDekQsQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLHFCQUFxQixHQUFHO0lBQ2pDLHFCQUFxQixDQUNqQixDQUFvQixFQUNwQixJQUEwQjtRQUUxQixNQUFNLFlBQVksR0FBSSxDQUFDLENBQUMsS0FBNkIsRUFBRSxJQUFJLENBQUM7UUFDNUQsSUFBSSxZQUFZLEVBQUUsQ0FBQztZQUNmLE9BQU87Z0JBQ0gsSUFBSTtnQkFDSixJQUFJLDBCQUEwQixDQUMxQixJQUFJLEdBQUcsRUFBRSxFQUNULElBQUksR0FBRyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FDMUI7YUFDSixDQUFDO1FBQ04sQ0FBQztRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFDRCxtQkFBbUIsQ0FDZixtQkFHZSxFQUNmLFlBQW9CO1FBRXBCLElBQUksbUJBQW1CLEVBQUUsQ0FBQztZQUN0QixNQUFNLFVBQVUsR0FBRyxrQkFBa0IsQ0FBQyxtQkFBbUIsQ0FBQztnQkFDdEQsQ0FBQyxDQUFDLG1CQUFtQjtnQkFDckIsQ0FBQyxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQztZQUMvQixxQ0FBcUM7WUFDckMsSUFBSSxVQUFVLEtBQUssSUFBSSxJQUFJLENBQUMsa0JBQWtCLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQztnQkFDekQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRSxVQUFVLENBQUMsQ0FBQztnQkFDM0MsT0FBTyxJQUFJLENBQUM7WUFDaEIsQ0FBQztZQUNELE1BQU0scUJBQXFCLEdBQUcsVUFBVSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQ3BELENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FDQSxDQUF1QixDQUFDLEdBQTJCO2lCQUNoRCxJQUFJLEtBQUssWUFBWSxDQUNaLENBQUM7WUFFdkIsT0FBTyxxQkFBcUIsQ0FBQztRQUNqQyxDQUFDO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUNELG1DQUFtQyxDQUMvQixHQUFxQjtRQUVyQixLQUFLLE1BQU0sQ0FBQyxJQUFJLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUN2QixJQUNJLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxjQUFjLENBQUMsc0JBQXNCO2dCQUM3QyxDQUFDLENBQUMsSUFBSSxLQUFLLGNBQWMsQ0FBQyx3QkFBd0IsQ0FBQztnQkFDdkQsQ0FBQyxDQUFDLFdBQVcsRUFBRSxJQUFJLEtBQUssY0FBYyxDQUFDLG1CQUFtQixFQUM1RCxDQUFDO2dCQUNDLE1BQU0sbUJBQW1CLEdBQUcsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUN2RCxDQUFDLENBQUMsRUFBRSxFQUFFO29CQUNGLE1BQU0sa0JBQWtCLEdBQ3BCLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxjQUFjLENBQUMsa0JBQWtCO3dCQUN6Qyw0REFBNEQ7d0JBQzVELENBQUMsQ0FBQyxJQUFJLEVBQUUsSUFBSTs0QkFDUixjQUFjLENBQUMsZ0JBQWdCLENBQUM7d0JBQ3hDLEtBQUssQ0FBQztvQkFFVixNQUFNLGtCQUFrQixHQUNwQixrQkFBa0I7d0JBRWQsQ0FBQyxDQUFDLElBQ0wsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxFQUFFLEVBQUU7NEJBQzNCLE9BQU8sQ0FDSCxDQUFDLFFBQVEsQ0FBQyxJQUFJO2dDQUNWLGNBQWMsQ0FBQyxRQUFRO2dDQUN2QixRQUFRLENBQUMsR0FBRyxDQUFDLElBQUk7b0NBQ2IsY0FBYyxDQUFDLFVBQVU7Z0NBQzdCLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxLQUFLLFNBQVM7Z0NBQy9CLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSTtvQ0FDZixjQUFjLENBQUMsVUFBVSxDQUFDO2dDQUNsQyxLQUFLLENBQ1IsQ0FBQzt3QkFDTixDQUFDLENBQUMsQ0FBQztvQkFDUCxPQUFPLGtCQUFrQixDQUFDO2dCQUM5QixDQUFDLENBQ0osQ0FBQztnQkFFRixPQUFPLG1CQUFtQixDQUFDO1lBQy9CLENBQUM7UUFDTCxDQUFDO1FBQ0QsT0FBTyxTQUFTLENBQUM7SUFDckIsQ0FBQztDQUNKLENBQUMifQ==