import { TSESLint, TSESTree } from "@typescript-eslint/utils";
import { ParserServices } from "@typescript-eslint/parser";
import ts from "typescript";
export declare const typedTokenHelpers: {
    decoratorsThatCouldMeanTheDevIsValidatingAnArray: string[];
    isTypeArrayTypeOrUnionOfArrayTypes(node: TSESTree.Node, parserService: ParserServices, checker: ts.TypeChecker): boolean;
    getNodeType(node: TSESTree.Node, parserService: ParserServices, checker: ts.TypeChecker): ts.Type;
    expressionNodeIsArrayType(node: TSESTree.Expression, parserService: ParserServices, checker: ts.TypeChecker): boolean;
    getPropertyValueEqualsExpected(firstArgument: TSESTree.ObjectExpression, propertyName: string, expectedValue: string | number | bigint | boolean | RegExp | null): boolean;
    getConstrainedTypeAtLocation(checker: ts.TypeChecker, node: ts.Node): ts.Type;
    nodeHasDecoratorsNamed(n: TSESTree.ClassDeclaration | TSESTree.PropertyDefinition | TSESTree.MethodDefinition, decoratorNames: string[]): boolean;
    getDecoratorsNamed(n: TSESTree.ClassDeclaration | TSESTree.PropertyDefinition | TSESTree.MethodDefinition, decoratorNames: string[]): TSESTree.Decorator[];
    parseStringToAst(code: string, path: string, context: Readonly<TSESLint.RuleContext<never, never[]>>): TSESTree.Program;
    isEnumType(type: ts.Type): boolean;
    isOptionalPropertyValue(node: TSESTree.PropertyDefinition): boolean;
    /**
     * Checks if an import is an import of the given decorator name
     * @param imp
     * @param decoratorName
     */
    importIsDecorator(imp: TSESTree.ImportDeclaration, decoratorName: string): boolean;
    /**
     * Checks if decorator is in imports of a node
     * @param imports
     * @param decorator
     */
    decoratorIsImportedFromClassValidator(imports: TSESTree.ImportDeclaration[], decorator: TSESTree.Decorator): boolean;
    /**
     * Checks whether a decorator is a class validator decorator
     * @param program The root program node
     * @param decorator The decorator node
     */
    decoratorIsClassValidatorDecorator(program: TSESTree.Program | null, decorator: TSESTree.Decorator): boolean;
    /**
     * Gets the root program of a node
     * @param node
     */
    getRootProgram(node: TSESTree.BaseNode): TSESTree.Program | null;
    /**
     * Gets all the decorators actually imported from class-validator lib or decorators that were included in the additionalCustomValidatorDecorators options
     * @param node PropertyDefinition node
     */
    getValidationDecorators(node: TSESTree.PropertyDefinition, additionalCustomValidatorDecorators?: string[]): TSESTree.Decorator[];
    /**
     * Checks if the decorator is the IsEnum decorator
     * @param decorator
     */
    decoratorIsIsEnum(decorator: TSESTree.Decorator): boolean;
    /** Checks if the decorator is the IsObject decorator
     * @param decorator
     */
    decoratorIsIsObject(decorator: TSESTree.Decorator): boolean;
    /**
     * Gets the name of a decorator
     * Returns null if no name is found
     * @param decorator
     */
    getDecoratorName(decorator: TSESTree.Decorator): string | null;
};
