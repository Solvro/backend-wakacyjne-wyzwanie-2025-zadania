{"version":3,"sources":["../src/eslint/configs/typescript-strict.ts","../src/eslint/configs/unicorn.ts"],"sourcesContent":["import tseslint from \"typescript-eslint\";\nimport type { ConfigWithExtends } from \"typescript-eslint\";\n\nimport { pluginAntfu } from \"../plugins\";\n\nexport function typescriptStrict(): ConfigWithExtends[] {\n  return [\n    ...tseslint.configs.strictTypeChecked,\n    ...tseslint.configs.stylisticTypeChecked,\n    {\n      name: \"solvro/typescript-strict/setup\",\n      plugins: {\n        antfu: pluginAntfu,\n      },\n    },\n    {\n      files: [\"**/*.{ts,tsx}\"],\n      name: \"solvro/typescript-strict/rules\",\n      rules: {\n        \"@typescript-eslint/ban-ts-comment\": [\n          \"error\",\n          { \"ts-expect-error\": \"allow-with-description\" },\n        ],\n        \"@typescript-eslint/consistent-type-definitions\": [\n          \"error\",\n          \"interface\",\n        ],\n        \"@typescript-eslint/consistent-type-imports\": [\n          \"error\",\n          {\n            disallowTypeAnnotations: false,\n            prefer: \"type-imports\",\n          },\n        ],\n        \"@typescript-eslint/method-signature-style\": [\"error\", \"property\"], // https://www.totaltypescript.com/method-shorthand-syntax-considered-harmful\n        \"@typescript-eslint/no-dupe-class-members\": \"error\",\n        \"@typescript-eslint/no-empty-object-type\": [\n          \"error\",\n          { allowInterfaces: \"always\" },\n        ],\n        \"@typescript-eslint/no-import-type-side-effects\": \"error\",\n        \"@typescript-eslint/no-redeclare\": [\"error\", { builtinGlobals: false }],\n        \"@typescript-eslint/no-require-imports\": \"error\",\n        \"@typescript-eslint/no-unused-expressions\": [\n          \"error\",\n          {\n            allowShortCircuit: true,\n            allowTaggedTemplates: true,\n            allowTernary: true,\n          },\n        ],\n        \"@typescript-eslint/no-use-before-define\": [\n          \"error\",\n          { classes: false, functions: false, variables: true },\n        ],\n        \"@typescript-eslint/no-wrapper-object-types\": \"error\",\n        // prevent unnecessary use of void operator\n        \"@typescript-eslint/no-meaningless-void-operator\": \"error\",\n        // \"using non-null assertions cancels the benefits of the strict\n        // null-checking mode.\"\n        // warn when one of the types in union / intersection overrides others\n        \"@typescript-eslint/no-redundant-type-constituents\": \"warn\",\n        // prevent variables shadowing\n        \"no-shadow\": \"error\",\n        \"@typescript-eslint/no-shadow\": \"error\",\n        // prevent assignment of this, signals a wrong usage of it\n        \"@typescript-eslint/no-this-alias\": \"error\",\n        // prevent throwing non-error\n        \"no-throw-literal\": \"off\",\n\n        // prevent unnecessary explicitly adding a default type argument\n        \"@typescript-eslint/no-unnecessary-type-arguments\": \"error\",\n        // prevent unnecessary assertions that won't change the outcome\n        \"@typescript-eslint/no-unnecessary-type-assertion\": \"error\",\n        // prevent extending default types\n        \"@typescript-eslint/no-unnecessary-type-constraint\": \"error\",\n        // force typing out function arguments\n        \"@typescript-eslint/no-unsafe-argument\": \"error\",\n        // prevent usage of any via reassigning\n        \"@typescript-eslint/no-unsafe-assignment\": \"error\",\n        // prevent usage of any via calling it\n        \"@typescript-eslint/no-unsafe-call\": \"error\",\n        // prevent usage of any via using it's members\n        \"@typescript-eslint/no-unsafe-member-access\": \"error\",\n        // prevent reverting any from functions\n        \"@typescript-eslint/no-unsafe-return\": \"error\",\n        // prevent unused expressions\n        \"no-unused-expressions\": \"off\",\n        // var<'string'> = 'string' -> var = 'string' as const\n        \"@typescript-eslint/prefer-as-const\": \"error\",\n        // force initializing enums\n        \"@typescript-eslint/prefer-enum-initializers\": \"error\",\n        // prefer for x of obj to for let i = 0...\n        \"@typescript-eslint/prefer-for-of\": \"error\",\n        // prefer includes() to indexOf()\n        \"@typescript-eslint/prefer-includes\": \"error\",\n        // use literals for enum initialization\n        \"@typescript-eslint/prefer-literal-enum-member\": \"error\",\n        // prefer safe cascade of a value when dealing with undefined or null\n        \"@typescript-eslint/prefer-nullish-coalescing\": \"error\",\n        // prefer optional chaining (a?.b)\n        \"@typescript-eslint/prefer-optional-chain\": \"error\",\n        // prefer using type parameter for Array.reduce\n        \"@typescript-eslint/prefer-reduce-type-parameter\": \"error\",\n        // prefer RegExp#exec when no /g flag in regex\n        \"@typescript-eslint/prefer-regexp-exec\": \"error\",\n        // enforce `this` as a type when stating type for a method\n        \"@typescript-eslint/prefer-return-this-type\": \"error\",\n        // enforce startsWith to indexOf === 0\n        \"@typescript-eslint/prefer-string-starts-ends-with\": \"error\",\n        // prevents default behavior of .sort() - which is confusing\n        \"@typescript-eslint/require-array-sort-compare\": \"error\",\n        // no async functions without awaits in body\n        \"require-await\": \"off\",\n        \"@typescript-eslint/require-await\": \"error\",\n        // prevent number + string\n        \"@typescript-eslint/restrict-plus-operands\": \"error\",\n        // only allow string in templates\n        \"@typescript-eslint/restrict-template-expressions\": \"error\",\n        // prevent returning await\n        \"no-return-await\": \"off\",\n        \"@typescript-eslint/return-await\": \"error\",\n        // only booleans in ifs and whiles\n        \"@typescript-eslint/strict-boolean-expressions\": \"error\",\n        // check if all paths are followed in code\n        \"@typescript-eslint/switch-exhaustiveness-check\": \"error\",\n        \"dot-notation\": \"off\",\n        \"no-implied-eval\": \"off\",\n        \"@typescript-eslint/await-thenable\": \"error\",\n        \"@typescript-eslint/dot-notation\": [\"error\", { allowKeywords: true }],\n        \"@typescript-eslint/no-floating-promises\": \"error\",\n        \"@typescript-eslint/no-for-in-array\": \"error\",\n        \"@typescript-eslint/no-implied-eval\": \"error\",\n        \"@typescript-eslint/no-misused-promises\": \"error\",\n        \"@typescript-eslint/promise-function-async\": \"error\",\n        \"@typescript-eslint/unbound-method\": \"error\",\n        \"no-restricted-imports\": \"off\",\n      },\n    },\n  ];\n}\n","import type { ConfigWithExtends } from \"typescript-eslint\";\n\nimport { pluginUnicorn } from \"../plugins\";\n\nexport function unicorn(): ConfigWithExtends[] {\n  return [\n    {\n      name: \"solvro/unicorn/rules\",\n      plugins: {\n        unicorn: pluginUnicorn,\n      },\n      rules: {\n        ...pluginUnicorn.configs.recommended.rules,\n        \"unicorn/no-array-reduce\": \"off\",\n        \"unicorn/no-null\": \"off\",\n        \"unicorn/no-useless-switch-case\": \"off\",\n        \"unicorn/prefer-global-this\": \"off\",\n        \"unicorn/prevent-abbreviations\": [\n          \"error\",\n          {\n            replacements: {\n              env: false,\n              envs: false,\n              props: false,\n              prop: false,\n              ref: false,\n              utils: false,\n            },\n            allowList: {\n              e2e: true,\n            },\n            ignore: [String.raw`e2e`],\n          },\n        ],\n      },\n    },\n  ];\n}\n"],"mappings":"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","names":["default","default"]}