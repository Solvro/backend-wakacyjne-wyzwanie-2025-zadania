import {
  init_esm_shims
} from "../chunk-J5OUMHDO.js";

// src/cli/index.ts
init_esm_shims();
import * as p6 from "@clack/prompts";
import { Command } from "commander";
import c from "picocolors";

// package.json
var package_default = {
  name: "@solvro/config",
  version: "2.0.1",
  description: "Solvro's engineering style guide",
  keywords: [
    "eslint",
    "prettier",
    "solvro"
  ],
  homepage: "https://github.com/Solvro/lib-web-solvro-config#readme",
  bugs: {
    url: "https://github.com/Solvro/lib-web-solvro-config/issues"
  },
  repository: {
    type: "git",
    url: "git+https://github.com/Solvro/lib-web-solvro-config.git"
  },
  license: "MPL-2.0",
  type: "module",
  exports: {
    "./eslint": {
      types: "./dist/eslint/index.d.ts",
      import: "./dist/eslint/index.js",
      require: "./dist/eslint/index.cjs"
    },
    "./prettier": {
      types: "./dist/prettier/index.d.ts",
      import: "./dist/prettier/index.js",
      require: "./dist/prettier/index.cjs"
    },
    "./commitlint": {
      types: "./dist/commitlint/index.d.ts",
      import: "./dist/commitlint/index.js",
      require: "./dist/commitlint/index.cjs"
    }
  },
  bin: "./bin/index.js",
  files: [
    "dist"
  ],
  scripts: {
    build: "tsup",
    "build:watch": "tsup --watch",
    cli: "tsx ./src/cli/index.ts",
    dev: "npx @eslint/config-inspector",
    format: "prettier --check .",
    knip: "knip",
    lint: "eslint .",
    prepare: "husky || true",
    prepublish: "npm run build",
    release: "semantic-release",
    test: "vitest run",
    "test:ui": "vitest --ui",
    "test:watch": "vitest",
    typecheck: "tsc --noEmit"
  },
  "lint-staged": {
    "*": "prettier -w --ignore-unknown"
  },
  prettier: "./dist/prettier/index.js",
  dependencies: {
    "@adonisjs/eslint-config": "^2.1.0",
    "@clack/prompts": "^0.11.0",
    "@commitlint/config-conventional": "^19.8.1",
    "@darraghor/eslint-plugin-nestjs-typed": "^6.7.0",
    "@eslint-community/eslint-plugin-eslint-comments": "^4.5.0",
    "@eslint/js": "^9.30.1",
    "@tanstack/eslint-plugin-query": "^5.81.2",
    "@trivago/prettier-plugin-sort-imports": "^5.2.2",
    "@typescript-eslint/eslint-plugin": "^8.35.1",
    commander: "^14.0.0",
    "eslint-config-prettier": "^10.1.5",
    "eslint-plugin-antfu": "^3.1.1",
    "eslint-plugin-import": "^2.32.0",
    "eslint-plugin-jsdoc": "^51.3.3",
    "eslint-plugin-jsx-a11y": "^6.10.2",
    "eslint-plugin-n": "^17.21.0",
    "eslint-plugin-react": "^7.37.5",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.16",
    "eslint-plugin-unicorn": "^59.0.1",
    "eslint-plugin-unused-imports": "^4.1.4",
    execa: "^9.6.0",
    "find-up-simple": "^1.0.1",
    globals: "^16.3.0",
    "is-interactive": "^2.0.0",
    "local-pkg": "^1.1.1",
    picocolors: "^1.1.1",
    "prettier-plugin-packagejson": "^2.5.18",
    "prettier-plugin-tailwindcss": "^0.6.13",
    semver: "^7.7.2",
    "typescript-eslint": "^8.35.1"
  },
  devDependencies: {
    "@commitlint/cli": "^19.8.1",
    "@eslint/config-inspector": "^1.1.0",
    "@next/eslint-plugin-next": "^15.3.5",
    "@semantic-release/git": "^10.0.1",
    "@types/node": "^24.0.10",
    "@types/semver": "^7.7.0",
    "@vitest/coverage-v8": "^3.2.4",
    "@vitest/ui": "^3.2.4",
    eslint: "^9.30.1",
    "eslint-config-flat-gitignore": "^2.1.0",
    "eslint-plugin-react-you-might-not-need-an-effect": "^0.4.1",
    husky: "^9.1.7",
    jiti: "^2.4.2",
    knip: "^5.61.3",
    "lint-staged": "^16.1.2",
    prettier: "^3.6.2",
    "semantic-release": "^24.2.6",
    tsup: "^8.5.0",
    tsx: "^4.20.3",
    typescript: "^5.8.3",
    vitest: "^3.2.4"
  },
  peerDependencies: {
    "@next/eslint-plugin-next": ">=12.3.0 <16.0.0-0"
  },
  packageManager: "npm@11.4.2",
  engines: {
    node: "^20.19.0 || >=22.12.0"
  },
  volta: {
    node: "22.17.0"
  },
  publishConfig: {
    access: "public"
  }
};

// src/utils/is-git-clean.ts
init_esm_shims();
import { execSync } from "child_process";
function isGitClean() {
  try {
    execSync("git diff-index --quiet HEAD --");
    return true;
  } catch {
    return false;
  }
}

// src/utils/package-json.ts
init_esm_shims();
import * as p from "@clack/prompts";
import { getPackageInfo, isPackageListed, loadPackageJSON } from "local-pkg";
import assert from "assert";
import { writeFile } from "fs/promises";
import path2 from "path";
import semver from "semver";

// src/utils/$$.ts
init_esm_shims();

// src/utils/git-root.ts
init_esm_shims();
import { findUpSync } from "find-up-simple";
import { execSync as execSync2 } from "child_process";
import path from "path";
var projectRoot = () => {
  const packageJsonPath = findUpSync("package.json");
  if (packageJsonPath !== void 0) {
    return path.dirname(packageJsonPath);
  }
  return process.cwd();
};
var gitRoot = () => {
  try {
    const rootDirectory = execSync2("git rev-parse --show-toplevel", {
      cwd: projectRoot()
    });
    return rootDirectory.toString().trim();
  } catch {
    return projectRoot();
  }
};

// src/utils/$$.ts
var cachedExeca = null;
var $$ = async (...arguments_) => {
  if (cachedExeca === null) {
    const { $ } = await import("execa");
    cachedExeca = $({
      cwd: projectRoot()
    });
  }
  return cachedExeca(...arguments_);
};

// src/utils/run-if-interactive.ts
init_esm_shims();
import isInteractive from "is-interactive";
var runIfInteractive = (function_) => {
  if (isInteractive()) {
    return function_();
  }
  return void 0;
};

// src/utils/package-json.ts
var PackageJson = class {
  json = null;
  async load() {
    const json = await loadPackageJSON(projectRoot());
    if (json === null) {
      p.cancel(
        "Nie znaleziono package.json. Upewnij si\u0119, \u017Ce jeste\u015B w katalogu projektu."
      );
      process.exit(1);
    }
    this.json = json;
  }
  hasPackage(package_) {
    return isPackageListed(package_);
  }
  async doesSatisfies(package_, version) {
    await this.load();
    assert.ok(this.json !== null);
    const packageInfo = await getPackageInfo(package_);
    if (packageInfo?.version === void 0) {
      return false;
    }
    return semver.satisfies(packageInfo.version, version);
  }
  async isESM() {
    await this.load();
    assert.ok(this.json !== null);
    return this.json.type === "module";
  }
  async ensureESM() {
    if (await this.isESM()) {
      return;
    }
    assert.ok(this.json !== null);
    this.json.type = "module";
    await this.save();
  }
  async getProjectType() {
    const isAdonis = await isPackageListed("@adonisjs/core");
    const isReact = await isPackageListed("react");
    const isNestJs = await isPackageListed("@nestjs/core");
    if (isReact && isAdonis) {
      throw new Error(
        "You can't use both Adonis and React in the same project"
      );
    }
    if (isNestJs) {
      return "nestjs";
    }
    if (isAdonis) {
      return "adonis";
    }
    if (isReact) {
      return "react";
    }
    return "node";
  }
  async save() {
    await writeFile(
      path2.join(projectRoot(), "package.json"),
      JSON.stringify(this.json, null, 2)
    );
  }
  async addScriptIfNotExists(name, script) {
    await this.load();
    assert.ok(this.json !== null);
    if (this.json.scripts?.[name] !== void 0) {
      return;
    }
    this.json.scripts = this.json.scripts ?? {};
    this.json.scripts[name] = script;
    await this.save();
  }
  async install(package_, options2) {
    const isInstalled = await this.hasPackage(package_);
    if (!isInstalled) {
      const spinner2 = p.spinner();
      runIfInteractive(() => {
        spinner2.start(`Instalowanie ${package_}`);
      });
      await $$`npm i ${options2?.dev === true ? "-D" : ""} ${package_}@latest`;
      runIfInteractive(() => {
        spinner2.stop(`${package_} zainstalowany \u{1F60D}`);
      });
      await this.load();
      return;
    }
    const info = await getPackageInfo(package_);
    if (info?.version !== void 0 && options2?.minVersion !== void 0 && !semver.satisfies(info.version, options2.minVersion) || options2?.alwaysUpdate === true) {
      const spinner2 = p.spinner();
      runIfInteractive(() => {
        spinner2.start(`Aktualizowanie ${package_}`);
      });
      await $$`npm i ${options2.dev === true ? "-D" : ""} ${package_}@latest`;
      runIfInteractive(() => {
        spinner2.stop(`${package_} zaktualizowany \u{1F60D}`);
      });
      await this.load();
    }
  }
  async clearInstall() {
    await $$`npm ci`;
  }
};

// src/utils/polish-confirm.ts
init_esm_shims();
import * as p2 from "@clack/prompts";
import isInteractive2 from "is-interactive";
var polishConfirm = async (props) => {
  if (!isInteractive2()) {
    return true;
  }
  return p2.confirm({
    active: "Tak",
    inactive: "Nie",
    ...props
  });
};

// src/cli/install-commitlint.ts
init_esm_shims();
import { writeFile as writeFile2 } from "fs/promises";
import path3 from "path";

// src/cli/install-husky.ts
init_esm_shims();
import assert2 from "assert";
var packageJson = new PackageJson();
var installHusky = async () => {
  if (!await packageJson.hasPackage("husky")) {
    await packageJson.install("husky", { dev: true });
    await $$`npx husky init`;
  }
  await packageJson.load();
  assert2.ok(packageJson.json !== null);
  packageJson.json.scripts = packageJson.json.scripts ?? {};
  packageJson.json.scripts.prepare = `husky || true`;
  await packageJson.save();
};

// src/cli/templates/commitlint.ts
init_esm_shims();
var commitlint = () => `export default {
  extends: ["@solvro/config/commitlint"],
};
`;

// src/cli/install-commitlint.ts
var root = projectRoot();
var packageJson2 = new PackageJson();
var installCommitLint = async () => {
  await installHusky();
  await packageJson2.install("@commitlint/cli", { dev: true });
  await writeFile2(
    path3.join(root, ".husky/commit-msg"),
    'npx commitlint --edit "$1"\n'
  );
  await writeFile2(path3.join(root, ".commitlintrc.js"), commitlint());
};

// src/cli/install-eslint.ts
init_esm_shims();
import * as p3 from "@clack/prompts";
import { existsSync } from "fs";
import * as fs from "fs/promises";
import path4 from "path";
var eslintConfigNames = [
  ".eslintrc.js",
  ".eslintrc.cjs",
  ".eslintrc.yaml",
  ".eslintrc.yml",
  ".eslintrc.json",
  ".eslintrc",
  "eslint.config.js",
  "eslint.config.mjs",
  "eslint.config.cjs",
  "eslint.config.ts",
  "eslint.config.mts",
  "eslint.config.cts"
];
var packageJson3 = new PackageJson();
var installEslint = async (isNonInteractive2 = false) => {
  const root2 = projectRoot();
  await packageJson3.load();
  await packageJson3.install("eslint", { dev: true, minVersion: ">=9" });
  const type = await packageJson3.getProjectType();
  if (type === "react" && await packageJson3.hasPackage("next")) {
    const is15 = await packageJson3.doesSatisfies("next", ">=15");
    if (!is15) {
      p3.cancel(
        "Next.js musi by\u0107 w conajmniej wersji 15. Zaktualizuj Next.js i spr\xF3buj ponownie.\nWi\u0119cej informacji tutaj: https://nextjs.org/docs/app/building-your-application/upgrading/version-15"
      );
      process.exit(1);
    }
    await packageJson3.install("@next/eslint-plugin-next", { dev: true });
  }
  const eslintConfig = eslintConfigNames.find(
    (configName) => existsSync(path4.join(root2, configName))
  );
  if (eslintConfig !== void 0) {
    const eslintContent = await fs.readFile(
      path4.join(root2, eslintConfig),
      "utf8"
    );
    if (eslintContent.includes("export default solvro(")) {
      p3.note("Eslint jest ju\u017C skonfigurowany. Pomijam.");
      return;
    } else {
      if (isNonInteractive2) {
        await fs.rm(path4.join(root2, eslintConfig));
      } else {
        const isConfirmed = await polishConfirm({
          message: `Znaleziono plik konfiguracyjny Eslint. Czy chcesz go nadpisa\u0107?`
        });
        if (p3.isCancel(isConfirmed) || !isConfirmed) {
          p3.cancel("Nadpisz plik konfiguracyjny Eslint i spr\xF3buj ponownie.");
          process.exit(1);
        }
        await fs.rm(path4.join(root2, eslintConfig));
      }
    }
  }
  const isESM = await packageJson3.isESM();
  const eslintFilename = isESM ? "eslint.config.js" : "eslint.config.mjs";
  await fs.writeFile(
    path4.join(root2, eslintFilename),
    `import { solvro } from "@solvro/config/eslint";

export default solvro();
`
  );
  p3.note("Plik konfiguracyjny Eslint zosta\u0142 utworzony.");
};

// src/cli/install-ga.ts
init_esm_shims();
import * as p4 from "@clack/prompts";
import { existsSync as existsSync2 } from "fs";
import * as fs2 from "fs/promises";
import path5 from "path";

// src/cli/templates/adonis-ci.ts
init_esm_shims();

// src/cli/templates/commit-lint-ci.ts
init_esm_shims();
var commitLintCi = () => `
      - name: Check commit name
        if: github.event_name == 'pull_request'
        run: npx commitlint --from \${{ github.event.pull_request.base.sha }} --to \${{ github.event.pull_request.head.sha }} --verbose
`;

// src/cli/templates/adonis-ci.ts
var adonisCi = ({
  nodeVersion,
  withCommitlint
}) => `name: CI

on:
  push:
    branches: ["main"]
  pull_request:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${nodeVersion}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Set up AdonisJS environment
        run: |
          cp .env.example .env
          node ace generate:key
${withCommitlint ? commitLintCi() : ""}
      - name: Run prettier
        run: npm run format:check
        if: always()

      - name: Run Lint
        run: npm run lint
        if: always()

      - name: Check types
        run: npm run typecheck
        if: always()

      - name: Run tests
        run: npm test
        if: always()

      - name: Build
        run: npm run build
        if: always()`;

// src/cli/templates/adonis-ci-migrations.ts
init_esm_shims();
var adonisMigrationsCi = () => `name: Migration check

on:
  pull_request:
    branches: ["*"]
  push:
    branches: ["main"]

jobs:
  migration-check:
    runs-on: ubuntu-latest
    env:
      DB_HOST: 127.0.0.1
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_DATABASE: postgres

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: npm ci

      - name: Set up AdonisJS environment
        run: |
          cp .env.example .env
          node ace generate:key

      - name: Run AdonisJS migrations
        run: node ace migration:run

      - name: Rollback and rerun AdonisJS migrations
        run: node ace migration:refresh
`;

// src/cli/templates/dependabot.ts
init_esm_shims();
var dependabot = () => `version: 2
updates:
  - package-ecosystem: "npm"
    directory: "/"
    schedule:
      interval: "daily"
    allow:
      - dependency-name: "@solvro/config"
`;

// src/cli/templates/nestjs-ci.ts
init_esm_shims();
var nestjsCi = ({
  nodeVersion,
  withCommitlint
}) => `name: CI

on:
  push:
    branches: ["main"]
  pull_request:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${nodeVersion}
          cache: "npm"

      - name: Install dependencies
        run: npm ci
${withCommitlint ? commitLintCi() : ""}
      - name: Run prettier
        run: npm run format:check
        if: always()

      - name: Run Lint
        run: npm run lint
        if: always()

      - name: Check types
        run: npm run typecheck
        if: always()

      - name: Run tests
        run: npm test
        if: always()

      - name: Run e2e tests
        run: npm run test:e2e
        if: always()

      - name: Build
        run: npm run build
        if: always()`;

// src/cli/templates/react-ci.ts
init_esm_shims();
var reactCi = ({
  nodeVersion,
  withCommitlint
}) => `name: CI

on:
  push:
    branches: ["main"]
  pull_request:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${nodeVersion}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci
${withCommitlint ? commitLintCi() : ""}
      - name: Format check
        run: npm run format:check
        if: always()

      - name: Build
        run: npm run build
        if: always()`;

// src/cli/install-ga.ts
var packageJson4 = new PackageJson();
var installGithubActions = async () => {
  const gitDirectory = gitRoot();
  const projectDirectory = projectRoot();
  await packageJson4.load();
  const ghWorkflowsDirectory = path5.join(gitDirectory, ".github/workflows");
  await fs2.mkdir(ghWorkflowsDirectory, { recursive: true });
  const type = await packageJson4.getProjectType();
  const withCommitlint = await packageJson4.hasPackage("@commitlint/cli");
  if (type === "adonis") {
    if (!existsSync2(path5.join(projectDirectory, ".env.example"))) {
      p4.cancel(
        "Nie znaleziono pliku .env.example. Upewnij si\u0119, \u017Ce jeste\u015B w katalogu projektu Adonisa."
      );
      process.exit(1);
    }
    await fs2.writeFile(
      path5.join(ghWorkflowsDirectory, "ci.yml"),
      adonisCi({
        nodeVersion: "22",
        withCommitlint
      })
    );
    await fs2.writeFile(
      path5.join(ghWorkflowsDirectory, "db.yml"),
      adonisMigrationsCi()
    );
  }
  if (type === "react") {
    await fs2.writeFile(
      path5.join(ghWorkflowsDirectory, "ci.yml"),
      reactCi({
        nodeVersion: "22",
        withCommitlint
      })
    );
  }
  if (type === "nestjs") {
    await fs2.writeFile(
      path5.join(ghWorkflowsDirectory, "ci.yml"),
      nestjsCi({
        nodeVersion: "22",
        withCommitlint
      })
    );
  }
  if (!existsSync2(path5.join(gitDirectory, ".github/dependabot.yml"))) {
    await fs2.writeFile(
      path5.join(gitDirectory, ".github/dependabot.yml"),
      dependabot()
    );
  }
  await packageJson4.addScriptIfNotExists("format:check", "prettier --check .");
  await packageJson4.addScriptIfNotExists("lint", "eslint . --max-warnings=0");
  await packageJson4.addScriptIfNotExists("format", "prettier --write .");
  await packageJson4.addScriptIfNotExists("typecheck", "tsc --noEmit");
  p4.note("Dodano konfiguracj\u0119 CI i skrypty.");
};

// src/cli/install-lint-staged.ts
init_esm_shims();
import assert3 from "assert";
import { writeFile as writeFile5 } from "fs/promises";
var packageJson5 = new PackageJson();
var installLintStaged = async () => {
  await packageJson5.load();
  assert3.ok(packageJson5.json !== null);
  await installHusky();
  await packageJson5.install("lint-staged", { dev: true });
  await writeFile5(".husky/pre-commit", "npx lint-staged\n");
  packageJson5.json["lint-staged"] = {
    "*": "prettier -w --ignore-unknown"
  };
  await packageJson5.save();
};

// src/cli/install-prettier.ts
init_esm_shims();
import * as p5 from "@clack/prompts";
import assert4 from "assert";
import { existsSync as existsSync3 } from "fs";
import * as fs3 from "fs/promises";
import path6 from "path";
var prettierConfigNames = [
  ".prettierrc.js",
  ".prettierrc.cjs",
  ".prettierrc.yaml",
  ".prettierrc.yml",
  ".prettierrc.json",
  ".prettierrc",
  "prettier.config.js",
  "prettier.config.mjs",
  "prettier.config.cjs",
  "prettier.config.ts",
  "prettier.config.mts",
  "prettier.config.cts"
];
var packageJson6 = new PackageJson();
var installPrettier = async (isNonInteractive2 = false) => {
  const root2 = projectRoot();
  await packageJson6.load();
  assert4.ok(packageJson6.json !== null);
  await packageJson6.install("prettier", { dev: true, minVersion: ">=3" });
  const prettierConfig = prettierConfigNames.find(
    (configName) => existsSync3(path6.join(root2, configName))
  );
  const solvroPrettierPath = "@solvro/config/prettier";
  if (prettierConfig !== void 0 || packageJson6.json.prettier !== void 0) {
    if (packageJson6.json.prettier === solvroPrettierPath) {
      p5.note("Konfiguracja Prettiera jest ju\u017C ustawiona. Pomijam.");
      return;
    }
    if (isNonInteractive2) {
      for (const configName of prettierConfigNames) {
        await fs3.rm(path6.join(root2, configName)).catch(() => null);
      }
    } else {
      const isConfirmed = await polishConfirm({
        message: `Znaleziono konfiguracj\u0119 Prettiera. Czy chcesz j\u0105 nadpisa\u0107?`
      });
      if (p5.isCancel(isConfirmed) || !isConfirmed) {
        p5.cancel("Usu\u0144 konfiguracje Prettiera i spr\xF3buj ponownie.");
        process.exit(1);
      }
      for (const configName of prettierConfigNames) {
        await fs3.rm(path6.join(root2, configName)).catch(() => null);
      }
    }
  }
  packageJson6.json.prettier = solvroPrettierPath;
  await packageJson6.save();
  p5.note("Konfiguracja Prettiera zosta\u0142a dodana.");
};

// src/cli/index.ts
var program = new Command();
program.name("@solvro/config").description("Solvro's engineering style guide setup").version(package_default.version).option("-f, --force", "Skip git clean check", false).option("--eslint", "Install ESLint configuration", false).option("--prettier", "Install Prettier configuration", false).option("--gh-action", "Install GitHub Actions", false).option("--commitlint", "Install Commitlint configuration", false).option("-a, --all", "Install all tools", false);
program.parse();
var options = program.opts();
var isNonInteractive = process.argv.length > 2;
async function main() {
  if (!isNonInteractive) {
    p6.intro(c.bold(c.bgBlue("  @solvro/config  ")));
  }
  if (options.force !== true && !isGitClean()) {
    if (isNonInteractive) {
      console.error(
        "Git repository has uncommitted changes. Use --force to bypass this check."
      );
      process.exit(1);
    }
    const isConfirmed = await polishConfirm({
      message: `Masz niezapisane zmiany w Git. Czy chcesz kontynuowa\u0107?`
    });
    if (p6.isCancel(isConfirmed) || !isConfirmed) {
      p6.cancel("Zapisz zmiany w Git i spr\xF3buj ponownie.");
      process.exit(1);
    }
  }
  const packageJson7 = new PackageJson();
  const projectType = await packageJson7.getProjectType();
  if (!isNonInteractive) {
    if (projectType === "adonis") {
      const isConfirmed = await polishConfirm({
        message: `Wygl\u0105da jakby\u015B u\u017Cywa\u0142 Adonisa. Czy to si\u0119 zgadza?`
      });
      if (p6.isCancel(isConfirmed) || !isConfirmed) {
        p6.cancel("Zg\u0142o\u015B b\u0142\u0105d na GitHubie :(, a my spr\xF3bujemy pom\xF3c.");
        process.exit(1);
      }
    }
    if (projectType === "react") {
      const isConfirmed = await polishConfirm({
        message: `Wygl\u0105da jakby\u015B u\u017Cywa\u0142 Reacta. Czy to si\u0119 zgadza?`
      });
      if (p6.isCancel(isConfirmed)) {
        p6.cancel("\u{1F621}");
        process.exit(1);
      }
      if (!isConfirmed) {
        p6.cancel("Zg\u0142o\u015B b\u0142\u0105d na GitHubie :(, a my spr\xF3bujemy pom\xF3c.");
        process.exit(1);
      }
    }
    if (projectType === "nestjs") {
      const isConfirmed = await polishConfirm({
        message: `Wygl\u0105da jakby\u015B u\u017Cywa\u0142 NestJsa. Czy to si\u0119 zgadza?`
      });
      if (p6.isCancel(isConfirmed)) {
        p6.cancel("\u{1F621}");
        process.exit(1);
      }
    }
    if (projectType === "node") {
      p6.cancel(
        "Nie znaleziono ani Adonisa, Reacta, ani NestJsa. Musisz r\u0119cznie konfigurowa\u0107 projekt."
      );
      process.exit(1);
    }
  }
  if (projectType === "adonis" || projectType === "react") {
    if (isNonInteractive) {
      await packageJson7.ensureESM();
    } else {
      if (!await packageJson7.isESM()) {
        const isConfirmed = await polishConfirm({
          message: `Tw\xF3j projekt nie u\u017Cywa ESM (brak type: "module" w package.json). Czy chcesz to doda\u0107? (Wymagane by kontynuowa\u0107)`
        });
        if (p6.isCancel(isConfirmed) || !isConfirmed) {
          p6.cancel("Zmie\u0144 projekt na ESM i spr\xF3buj ponownie.");
          process.exit(1);
        }
        await packageJson7.ensureESM();
      }
    }
  }
  let toolsToInstall = [];
  if (options.all === true) {
    toolsToInstall = ["eslint", "prettier", "gh-action", "commitlint"];
  } else if (isNonInteractive) {
    if (options.eslint === true) {
      toolsToInstall.push("eslint");
    }
    if (options.prettier === true) {
      toolsToInstall.push("prettier");
    }
    if (options.ghAction === true) {
      toolsToInstall.push("gh-action");
    }
    if (options.commitlint === true) {
      toolsToInstall.push("commitlint");
    }
    if (toolsToInstall.length === 0) {
      console.error(
        "No tools specified. Use --eslint, --prettier, --gh-action, --commitlint, or --all"
      );
      process.exit(1);
    }
  } else {
    const additionalTools = await p6.multiselect({
      message: `Kt\xF3re rzeczy Ci\u0119 interesuj\u0105? ${c.gray("zaznacz spacj\u0105, potwierd\u017A enterem")}`,
      initialValues: ["eslint", "prettier", "gh-action", "commitlint"],
      options: [
        {
          value: "eslint",
          label: c.bold(c.blueBright("ESLint")),
          hint: "sprawdzanie jako\u015Bci kodu"
        },
        {
          value: "prettier",
          label: c.bold(c.yellowBright("Prettier")),
          hint: "formatowanie"
        },
        {
          value: "gh-action",
          label: c.bold("GitHub Actions"),
          hint: "automatyczne testy na Githubie"
        },
        {
          value: "commitlint",
          label: c.bold("Commitlint"),
          hint: "walidacja tre\u015Bci commit\xF3w"
        }
      ],
      required: false
    });
    if (p6.isCancel(additionalTools) || additionalTools.length === 0) {
      p6.cancel("Nie wybrano \u017Cadnych narz\u0119dzi.");
      process.exit(1);
    }
    toolsToInstall = additionalTools;
  }
  await packageJson7.install("@solvro/config", {
    dev: true,
    alwaysUpdate: !isNonInteractive
  });
  if (toolsToInstall.includes("eslint")) {
    await installEslint(isNonInteractive);
  }
  if (toolsToInstall.includes("prettier")) {
    await installPrettier(isNonInteractive);
    await installLintStaged();
  }
  if (toolsToInstall.includes("commitlint")) {
    await installCommitLint();
  }
  if (toolsToInstall.includes("gh-action")) {
    await installGithubActions();
  }
  await packageJson7.clearInstall();
  if (isNonInteractive) {
    console.log("\u2705 Configuration completed successfully!");
  } else {
    p6.outro("\u2705 Configuration completed successfully!");
  }
}
try {
  await main();
} catch (error) {
  console.error("An error occurred:", error);
  process.exit(1);
}
//# sourceMappingURL=index.js.map