import {
  default as default2,
  default2 as default3,
  default6 as default4
} from "../chunk-HM3MY7J3.js";
import {
  init_esm_shims
} from "../chunk-J5OUMHDO.js";

// src/eslint/index.ts
init_esm_shims();
import { findUpSync as findUpSync2 } from "find-up-simple";
import { isPackageListed } from "local-pkg";
import path3 from "path";
import tseslint3 from "typescript-eslint";

// src/eslint/presets/base.ts
init_esm_shims();

// node_modules/eslint-config-flat-gitignore/dist/index.mjs
init_esm_shims();
import fs2 from "fs";
import path2, { join, resolve, relative, dirname } from "path";
import process2 from "process";

// node_modules/@eslint/compat/dist/esm/index.js
init_esm_shims();
import fs from "fs";
import path from "path";
function convertIgnorePatternToMinimatch(pattern) {
  const isNegated = pattern.startsWith("!");
  const negatedPrefix = isNegated ? "!" : "";
  const patternToTest = (isNegated ? pattern.slice(1) : pattern).trimEnd();
  if (["", "**", "/**", "**/"].includes(patternToTest)) {
    return `${negatedPrefix}${patternToTest}`;
  }
  const firstIndexOfSlash = patternToTest.indexOf("/");
  const matchEverywherePrefix = firstIndexOfSlash < 0 || firstIndexOfSlash === patternToTest.length - 1 ? "**/" : "";
  const patternWithoutLeadingSlash = firstIndexOfSlash === 0 ? patternToTest.slice(1) : patternToTest;
  const escapedPatternWithoutLeadingSlash = patternWithoutLeadingSlash.replaceAll(
    /(?=((?:\\.|[^{(])*))\1([{(])/guy,
    "$1\\$2"
  );
  const matchInsideSuffix = patternToTest.endsWith("/**") ? "/*" : "";
  return `${negatedPrefix}${matchEverywherePrefix}${escapedPatternWithoutLeadingSlash}${matchInsideSuffix}`;
}

// node_modules/eslint-config-flat-gitignore/dist/index.mjs
import "fs/promises";
import { fileURLToPath } from "url";
function toArray(array) {
  array = array ?? [];
  return Array.isArray(array) ? array : [array];
}
var toPath = (urlOrPath) => urlOrPath instanceof URL ? fileURLToPath(urlOrPath) : urlOrPath;
function findUpSync(name, {
  cwd = process2.cwd(),
  type = "file",
  stopAt
} = {}) {
  let directory = path2.resolve(toPath(cwd) ?? "");
  const { root } = path2.parse(directory);
  stopAt = path2.resolve(directory, toPath(stopAt) ?? root);
  while (directory && directory !== stopAt && directory !== root) {
    const filePath = path2.isAbsolute(name) ? name : path2.join(directory, name);
    try {
      const stats = fs2.statSync(filePath, { throwIfNoEntry: false });
      if (type === "file" && stats?.isFile() || type === "directory" && stats?.isDirectory()) {
        return filePath;
      }
    } catch {
    }
    directory = path2.dirname(directory);
  }
}
var GITIGNORE = ".gitignore";
var GITMODULES = ".gitmodules";
function ignore(options = {}) {
  const ignores2 = [];
  const {
    cwd = process2.cwd(),
    root = false,
    files: _files = root ? GITIGNORE : findUpSync(GITIGNORE, { cwd }) || [],
    filesGitModules: _filesGitModules = root ? fs2.existsSync(join(cwd, GITMODULES)) ? GITMODULES : [] : findUpSync(GITMODULES, { cwd }) || [],
    strict = true
  } = options;
  const files = toArray(_files).map((file) => resolve(cwd, file));
  const filesGitModules = toArray(_filesGitModules).map((file) => resolve(cwd, file));
  for (const file of files) {
    let content = "";
    try {
      content = fs2.readFileSync(file, "utf8");
    } catch (error) {
      if (strict)
        throw error;
      continue;
    }
    const relativePath = relative(cwd, dirname(file)).replaceAll("\\", "/");
    const globs = content.split(/\r?\n/u).filter((line) => line && !line.startsWith("#")).map((line) => convertIgnorePatternToMinimatch(line)).map((glob) => relativeMinimatch(glob, relativePath, cwd)).filter((glob) => glob !== null);
    ignores2.push(...globs);
  }
  for (const file of filesGitModules) {
    let content = "";
    try {
      content = fs2.readFileSync(file, "utf8");
    } catch (error) {
      if (strict)
        throw error;
      continue;
    }
    const dirs = parseGitSubmodules(content);
    ignores2.push(...dirs.map((dir) => `${dir}/**`));
  }
  if (strict && files.length === 0)
    throw new Error("No .gitignore file found");
  return {
    name: options.name || "gitignore",
    ignores: ignores2
  };
}
function relativeMinimatch(pattern, relativePath, cwd) {
  if (["", ".", "/"].includes(relativePath))
    return pattern;
  const negated = pattern.startsWith("!") ? "!" : "";
  let cleanPattern = negated ? pattern.slice(1) : pattern;
  if (!relativePath.endsWith("/"))
    relativePath = `${relativePath}/`;
  const isParent = relativePath.startsWith("..");
  if (!isParent)
    return `${negated}${relativePath}${cleanPattern}`;
  if (!relativePath.match(/^(\.\.\/)+$/))
    throw new Error("The ignore file location should be either a parent or child directory");
  if (cleanPattern.startsWith("**"))
    return pattern;
  const parents = relative(resolve(cwd, relativePath), cwd).split(/[/\\]/);
  while (parents.length && cleanPattern.startsWith(`${parents[0]}/`)) {
    cleanPattern = cleanPattern.slice(parents[0].length + 1);
    parents.shift();
  }
  if (cleanPattern.startsWith("**"))
    return `${negated}${cleanPattern}`;
  if (parents.length === 0)
    return `${negated}${cleanPattern}`;
  return null;
}
function parseGitSubmodules(content) {
  return content.split(/\r?\n/u).map((line) => line.match(/path\s*=\s*(.+)/u)).filter((match) => match !== null).map((match) => match[1].trim());
}

// src/eslint/configs/comments.ts
init_esm_shims();
function comments() {
  return [
    {
      name: "solvro/eslint-comments/rules",
      plugins: {
        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
        "eslint-comments": default2
      },
      rules: {
        "eslint-comments/no-aggregating-enable": "error",
        "eslint-comments/no-duplicate-disable": "error",
        "eslint-comments/no-unlimited-disable": "error",
        "eslint-comments/no-unused-enable": "error"
      }
    }
  ];
}

// src/eslint/configs/disables.ts
init_esm_shims();
import tseslint from "typescript-eslint";

// src/eslint/globs.ts
init_esm_shims();
var GLOB_SRC_EXT = "?([cm])[jt]s?(x)";
var GLOB_SRC = "**/*.?([cm])[jt]s?(x)";
var GLOB_JS = "**/*.?([cm])js";
var GLOB_EXCLUDE = [
  "**/node_modules",
  "**/dist",
  "**/package-lock.json",
  "**/yarn.lock",
  "**/pnpm-lock.yaml",
  "**/bun.lockb",
  "**/build",
  "**/output",
  "**/coverage",
  "**/temp",
  "**/.temp",
  "**/tmp",
  "**/.tmp",
  "**/.history",
  "**/.vitepress/cache",
  "**/.nuxt",
  "**/.next",
  "**/.svelte-kit",
  "**/.vercel",
  "**/.changeset",
  "**/.idea",
  "**/.cache",
  "**/.output",
  "**/.vite-inspect",
  "**/.yarn",
  "**/vite.config.*.timestamp-*",
  "**/CHANGELOG*.md",
  "**/*.min.*",
  "**/LICENSE*",
  "**/__snapshots__",
  "**/auto-import?(s).d.ts",
  "**/components.d.ts"
];

// src/eslint/configs/disables.ts
function disables() {
  return [
    {
      files: [`**/scripts/${GLOB_SRC}`],
      name: "solvro/disables/scripts",
      rules: {
        "antfu/no-top-level-await": "off",
        "no-console": "off",
        "@typescript-eslint/explicit-function-return-type": "off"
      }
    },
    {
      rules: {
        "prettier/prettier": "off"
      }
    },
    {
      files: [`**/cli/${GLOB_SRC}`, `**/cli.${GLOB_SRC_EXT}`],
      name: "solvro/disables/cli",
      rules: {
        "antfu/no-top-level-await": "off",
        "no-console": "off"
      }
    },
    {
      files: ["**/bin/**/*", `**/bin.${GLOB_SRC_EXT}`],
      name: "solvro/disables/bin",
      rules: {
        "antfu/no-import-dist": "off",
        "antfu/no-import-node-modules-by-path": "off"
      }
    },
    {
      files: ["**/*.d.?([cm])ts"],
      name: "solvro/disables/dts",
      rules: {
        "eslint-comments/no-unlimited-disable": "off",
        "import-x/no-duplicates": "off",
        "no-restricted-syntax": "off",
        "unused-imports/no-unused-vars": "off"
      }
    },
    {
      files: ["**/*.js", "**/*.cjs"],
      name: "solvro/disables/cjs",
      rules: {
        "@typescript-eslint/no-require-imports": "off"
      }
    },
    {
      files: [`**/*.config.${GLOB_SRC_EXT}`, `**/*.config.*.${GLOB_SRC_EXT}`],
      name: "solvro/disables/config-files",
      rules: {
        "antfu/no-top-level-await": "off",
        "no-console": "off",
        "@typescript-eslint/explicit-function-return-type": "off"
      }
    },
    {
      files: [GLOB_JS],
      extends: [tseslint.configs.disableTypeChecked]
    }
  ];
}

// src/eslint/configs/formatters.ts
init_esm_shims();
import prettierConfig from "eslint-config-prettier";
function formatters() {
  return [
    {
      name: "solvro/prettier",
      rules: {
        ...prettierConfig.rules,
        curly: "error"
      }
    }
  ];
}

// src/eslint/configs/ignores.ts
init_esm_shims();
function ignores() {
  return [
    {
      ignores: [...GLOB_EXCLUDE],
      name: "solvro/ignores"
    }
  ];
}

// src/eslint/configs/javascript.ts
init_esm_shims();
import eslint from "@eslint/js";
import globals from "globals";
function javascript() {
  return [
    {
      languageOptions: {
        ecmaVersion: 2022,
        globals: {
          ...globals.browser,
          ...globals.es2021,
          ...globals.node,
          document: "readonly",
          navigator: "readonly",
          window: "readonly"
        },
        parserOptions: {
          ecmaFeatures: {
            jsx: true
          },
          ecmaVersion: 2022,
          sourceType: "module"
        },
        sourceType: "module"
      },
      linterOptions: {
        reportUnusedDisableDirectives: true
      },
      name: "solvro/javascript/setup"
    },
    {
      name: "solvro/javascript/rules",
      plugins: {
        antfu: default3,
        "unused-imports": default4
      },
      rules: {
        ...eslint.configs.recommended.rules,
        "accessor-pairs": [
          "error",
          { enforceForClassMembers: true, setWithoutGet: true }
        ],
        curly: "error",
        "array-callback-return": "error",
        "block-scoped-var": "error",
        "constructor-super": "error",
        "default-case-last": "error",
        "dot-notation": ["error", { allowKeywords: true }],
        eqeqeq: ["error", "smart"],
        "new-cap": [
          "error",
          { capIsNew: false, newIsCap: true, properties: true }
        ],
        "no-alert": "error",
        "no-array-constructor": "error",
        "no-async-promise-executor": "error",
        "no-caller": "error",
        "no-case-declarations": "error",
        "no-class-assign": "error",
        "no-compare-neg-zero": "error",
        "no-cond-assign": ["error", "always"],
        "no-console": ["error", { allow: ["warn", "error"] }],
        "no-const-assign": "error",
        "no-control-regex": "error",
        "no-debugger": "error",
        "no-delete-var": "error",
        "no-dupe-args": "error",
        "no-dupe-class-members": "error",
        "no-dupe-keys": "error",
        "no-duplicate-case": "error",
        "no-empty": ["error", { allowEmptyCatch: true }],
        "no-empty-character-class": "error",
        "no-empty-pattern": "error",
        "no-eval": "error",
        "no-ex-assign": "error",
        "no-extend-native": "error",
        "no-extra-bind": "error",
        "no-extra-boolean-cast": "error",
        "no-fallthrough": "error",
        "no-func-assign": "error",
        "no-global-assign": "error",
        "no-implied-eval": "error",
        "no-implicit-coercion": "error",
        "no-import-assign": "error",
        "no-invalid-regexp": "error",
        "no-irregular-whitespace": "error",
        "no-iterator": "error",
        "no-labels": ["error", { allowLoop: false, allowSwitch: false }],
        "no-lone-blocks": "error",
        "no-loss-of-precision": "error",
        "no-misleading-character-class": "error",
        "no-multi-str": "error",
        "no-new": "error",
        "no-new-func": "error",
        "no-new-native-nonconstructor": "error",
        "no-new-wrappers": "error",
        "no-obj-calls": "error",
        "no-octal": "error",
        "no-octal-escape": "error",
        "no-proto": "error",
        "no-prototype-builtins": "error",
        "no-redeclare": ["error", { builtinGlobals: false }],
        "no-regex-spaces": "error",
        "no-restricted-globals": [
          "error",
          { message: "Use `globalThis` instead.", name: "global" },
          { message: "Use `globalThis` instead.", name: "self" }
        ],
        "no-restricted-properties": [
          "error",
          {
            message: "Use `Object.getPrototypeOf` or `Object.setPrototypeOf` instead.",
            property: "__proto__"
          },
          {
            message: "Use `Object.defineProperty` instead.",
            property: "__defineGetter__"
          },
          {
            message: "Use `Object.defineProperty` instead.",
            property: "__defineSetter__"
          },
          {
            message: "Use `Object.getOwnPropertyDescriptor` instead.",
            property: "__lookupGetter__"
          },
          {
            message: "Use `Object.getOwnPropertyDescriptor` instead.",
            property: "__lookupSetter__"
          }
        ],
        "no-restricted-syntax": [
          "error",
          "TSEnumDeclaration[const=true]",
          "TSExportAssignment"
        ],
        "no-self-assign": ["error", { props: true }],
        "no-self-compare": "error",
        "no-sequences": "error",
        "no-shadow-restricted-names": "error",
        "no-sparse-arrays": "error",
        "no-template-curly-in-string": "error",
        "no-this-before-super": "error",
        "no-throw-literal": "error",
        "no-undef-init": "error",
        "no-unexpected-multiline": "error",
        "no-unmodified-loop-condition": "error",
        "no-unneeded-ternary": ["error", { defaultAssignment: false }],
        "no-unreachable": "error",
        "no-unreachable-loop": "error",
        "no-unsafe-finally": "error",
        "no-unsafe-negation": "error",
        "no-unused-expressions": [
          "error",
          {
            allowShortCircuit: true,
            allowTaggedTemplates: true,
            allowTernary: true
          }
        ],
        "no-useless-backreference": "error",
        "no-useless-call": "error",
        "no-useless-catch": "error",
        "no-useless-computed-key": "error",
        "no-useless-constructor": "error",
        "no-useless-rename": "error",
        "no-useless-return": "error",
        "no-var": "error",
        "no-with": "error",
        "object-shorthand": [
          "error",
          "always",
          {
            avoidQuotes: true,
            ignoreConstructors: false
          }
        ],
        "one-var": ["error", { initialized: "never" }],
        "prefer-arrow-callback": [
          "error",
          {
            allowNamedFunctions: false,
            allowUnboundThis: true
          }
        ],
        "prefer-const": [
          "error",
          {
            destructuring: "all",
            ignoreReadBeforeAssign: true
          }
        ],
        "prefer-exponentiation-operator": "error",
        "prefer-promise-reject-errors": "error",
        "prefer-regex-literals": ["error", { disallowRedundantWrapping: true }],
        "prefer-rest-params": "error",
        "prefer-spread": "error",
        "prefer-template": "error",
        "symbol-description": "error",
        "unicode-bom": ["error", "never"],
        "unused-imports/no-unused-imports": "error",
        "unused-imports/no-unused-vars": [
          "error",
          {
            args: "after-used",
            argsIgnorePattern: "^_",
            ignoreRestSiblings: true,
            vars: "all",
            varsIgnorePattern: "^_"
          }
        ],
        "use-isnan": [
          "error",
          { enforceForIndexOf: true, enforceForSwitchCase: true }
        ],
        "valid-typeof": ["error", { requireStringLiterals: true }],
        "vars-on-top": "error",
        yoda: ["error", "never"]
      }
    }
  ];
}

// src/eslint/configs/jsdoc.ts
init_esm_shims();
import jsdocPlugin from "eslint-plugin-jsdoc";
function jsdoc() {
  return [
    {
      name: "solvro/jsdoc/rules",
      plugins: {
        jsdoc: jsdocPlugin
      },
      rules: {
        "jsdoc/check-access": "warn",
        "jsdoc/check-param-names": "warn",
        "jsdoc/check-property-names": "warn",
        "jsdoc/check-types": "warn",
        "jsdoc/empty-tags": "warn",
        "jsdoc/implements-on-classes": "warn",
        "jsdoc/no-defaults": "warn",
        "jsdoc/no-multi-asterisks": "warn",
        "jsdoc/require-param-name": "warn",
        "jsdoc/require-property": "warn",
        "jsdoc/require-property-description": "warn",
        "jsdoc/require-property-name": "warn",
        "jsdoc/require-returns-check": "warn",
        "jsdoc/require-returns-description": "warn",
        "jsdoc/require-yields-check": "warn"
      }
    }
  ];
}

// src/eslint/configs/typescript-relaxed.ts
init_esm_shims();
import tseslint2 from "typescript-eslint";
function typescriptRelaxed() {
  return [
    ...tseslint2.configs.recommendedTypeChecked,
    ...tseslint2.configs.stylisticTypeChecked,
    {
      name: "solvro/typescript-relaxed/rules",
      rules: {
        "@typescript-eslint/no-unsafe-return": "off",
        "@typescript-eslint/require-await": "off",
        "@typescript-eslint/no-misused-promises": [
          "error",
          {
            checksVoidReturn: false
          }
        ],
        "no-useless-constructor": "off",
        "@typescript-eslint/no-useless-constructor": "error",
        "unused-imports/no-unused-vars": "off",
        "@typescript-eslint/no-unused-vars": [
          "error",
          {
            args: "all",
            argsIgnorePattern: "^_",
            destructuredArrayIgnorePattern: "^_",
            varsIgnorePattern: "^_",
            ignoreRestSiblings: true
          }
        ],
        "@typescript-eslint/no-empty-object-type": "off",
        "@typescript-eslint/no-unnecessary-condition": "warn",
        "@typescript-eslint/no-non-null-assertion": "error",
        "@typescript-eslint/no-unnecessary-template-expression": "error",
        "@typescript-eslint/strict-boolean-expressions": [
          "error",
          {
            allowNullableObject: false
          }
        ]
      }
    }
  ];
}

// src/eslint/presets/base.ts
var basePreset = () => [
  ignore(),
  ...javascript(),
  ...jsdoc(),
  ...comments(),
  ...typescriptRelaxed()
];
var defaultOverridesPreset = () => [
  ...ignores(),
  ...formatters(),
  ...disables()
];

// src/eslint/index.ts
var solvro = async (...overrides) => {
  const isAdonis = await isPackageListed("@adonisjs/core");
  const isReact = await isPackageListed("react");
  const isNestJs = await isPackageListed("@nestjs/core");
  if (isReact && isAdonis) {
    throw new Error("You can't use both Adonis and React in the same project");
  }
  const configs = basePreset();
  const projectConfigs = [];
  if (isAdonis) {
    const { adonisPreset } = await import("../adonis-MGLA5SOL.js");
    projectConfigs.push(...adonisPreset());
  } else if (isNestJs) {
    const { nestjsPreset } = await import("../nestjs-33SQ4ZD2.js");
    projectConfigs.push(...await nestjsPreset());
  } else if (isReact) {
    const { reactPreset } = await import("../react-PWJWWBLW.js");
    projectConfigs.push(...await reactPreset());
  } else {
    const { nodePreset } = await import("../node-RC2VAG45.js");
    projectConfigs.push(...nodePreset());
  }
  const tsConfigPath = findUpSync2("tsconfig.json", {
    cwd: process.cwd()
  });
  if (tsConfigPath == null) {
    throw new Error("No tsconfig.json found");
  }
  const rootDirectory = path3.dirname(tsConfigPath);
  const tsConfig = {
    languageOptions: {
      parserOptions: {
        projectService: true,
        tsconfigRootDir: rootDirectory
      }
    }
  };
  const defaultOverrides = defaultOverridesPreset();
  return tseslint3.config(
    ...configs,
    tsConfig,
    ...projectConfigs,
    ...defaultOverrides,
    ...overrides
  );
};
export {
  solvro
};
//# sourceMappingURL=index.js.map